{"ast":null,"code":"import { catchError, tap } from \"rxjs/operators\";\nimport { throwError, BehaviorSubject } from \"rxjs\";\nimport { User } from \"./user.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.user = new BehaviorSubject(null);\n  }\n  signup(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCiAvefFkCgdxZzD1_wJ9AbqBSqkffdXOU', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  login(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCiAvefFkCgdxZzD1_wJ9AbqBSqkffdXOU', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  autoLogin() {\n    const userData = JSON.parse(localStorage.getItem('userData'));\n    if (!userData) {\n      return;\n    }\n    const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n    if (loadedUser.token) {\n      this.user.next(loadedUser);\n      const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n      this.autoLogout(expirationDuration);\n    }\n  }\n  logout() {\n    this.user.next(null);\n    this.router.navigate(['/auth']);\n    localStorage.removeItem('userData');\n    if (this.tokenExpirationTimer) {\n      clearTimeout(this.tokenExpirationTimer);\n    }\n    this.tokenExpirationTimer = null;\n  }\n  autoLogout(expirationDuration) {\n    this.tokenExpirationTimer = setTimeout(() => {\n      this.logout();\n    }, expirationDuration);\n  }\n  handleAuthentication(email, userId, token, expiresIn) {\n    const expiradionDate = new Date(new Date().getTime() + expiresIn * 1000);\n    const user = new User(email, userId, token, expiradionDate);\n    this.user.next(user);\n    this.autoLogout(expiresIn * 1000);\n    localStorage.setItem('userData', JSON.stringify(user));\n  }\n  handleError(errorRes) {\n    let errorMsg = 'An unknown error occured!';\n    if (!errorRes.error || !errorRes.error.error) {\n      return throwError(errorMsg);\n    }\n    switch (errorRes.error.error.message) {\n      case 'EMAIL_EXISTS':\n        errorMsg = 'This email exists already';\n        break;\n      case 'EMAIL_NOT_FOUND':\n        errorMsg = 'This email does not exist.';\n        break;\n      case 'INVALID_PASSWORD':\n        errorMsg = 'This password is not correct.';\n        break;\n    }\n    return throwError(errorMsg);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","tap","throwError","BehaviorSubject","User","AuthService","constructor","http","router","user","signup","email","password","post","returnSecureToken","pipe","handleError","resData","handleAuthentication","localId","idToken","expiresIn","login","autoLogin","userData","JSON","parse","localStorage","getItem","loadedUser","id","_token","Date","_tokenExpirationDate","token","next","expirationDuration","getTime","autoLogout","logout","navigate","removeItem","tokenExpirationTimer","clearTimeout","setTimeout","userId","expiradionDate","setItem","stringify","errorRes","errorMsg","error","message","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["/home/oliver/Desktop/recipe-list-angular/src/app/auth/auth.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport { throwError, BehaviorSubject } from \"rxjs\";\n\nimport { User } from \"./user.model\";\nimport { Router } from \"@angular/router\";\nimport { ExpressionStatement } from \"@angular/compiler\";\n\nexport interface AuthResposeData {\n    kind: string;\n    idToken: string;\n    email: string;\n    refreshToken: string;\n    expiresIn: string;\n    localId: string;\n    registered?: boolean;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n    user = new BehaviorSubject<User>(null);\n    private tokenExpirationTimer: any;\n\n    constructor(private http: HttpClient,\n        private router: Router) { }\n\n\n    signup(email: string, password: string) {\n        return this.http.post<AuthResposeData>('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCiAvefFkCgdxZzD1_wJ9AbqBSqkffdXOU',\n            { email: email, password: password, returnSecureToken: true }\n        ).pipe(catchError(this.handleError), tap(resData => {\n            this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n\n        }));\n    }\n\n    login(email: string, password: string) {\n        return this.http.post<AuthResposeData>('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCiAvefFkCgdxZzD1_wJ9AbqBSqkffdXOU',\n            { email: email, password: password, returnSecureToken: true }\n        ).pipe(catchError(this.handleError), tap(resData => {\n            this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n\n        }));\n    }\n\n    autoLogin() {\n        const userData: {\n            email: string;\n            id: string;\n            _token: string;\n            _tokenExpirationDate: string;\n        } = JSON.parse(localStorage.getItem('userData'));\n        if (!userData) {\n            return;\n        }\n        const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n        if (loadedUser.token) {\n            this.user.next(loadedUser);\n            const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n            this.autoLogout(expirationDuration);\n        }\n    }\n\n    logout() {\n        this.user.next(null);\n        this.router.navigate(['/auth']);\n        localStorage.removeItem('userData');\n        if (this.tokenExpirationTimer) {\n            clearTimeout(this.tokenExpirationTimer);\n        }\n        this.tokenExpirationTimer = null;\n    }\n\n    autoLogout(expirationDuration: number) {\n        this.tokenExpirationTimer = setTimeout(() => {\n            this.logout();\n        }, expirationDuration);\n    }\n\n    private handleAuthentication(email: string, userId: string, token: string, expiresIn: number) {\n        const expiradionDate = new Date(new Date().getTime() + expiresIn * 1000);\n        const user = new User(email, userId, token, expiradionDate);\n        this.user.next(user);\n        this.autoLogout(expiresIn * 1000);\n        localStorage.setItem('userData', JSON.stringify(user));\n    }\n\n\n    private handleError(errorRes: HttpErrorResponse) {\n        let errorMsg = 'An unknown error occured!';\n        if (!errorRes.error || !errorRes.error.error) {\n            return throwError(errorMsg);\n        }\n        switch (errorRes.error.error.message) {\n            case 'EMAIL_EXISTS':\n                errorMsg = 'This email exists already';\n                break;\n            case 'EMAIL_NOT_FOUND':\n                errorMsg = 'This email does not exist.';\n                break;\n            case 'INVALID_PASSWORD':\n                errorMsg = 'This password is not correct.';\n                break;\n        }\n        return throwError(errorMsg);\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}