{"ast":null,"code":"import { catchError, tap } from 'rxjs/operators';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { User } from './user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.user = new BehaviorSubject(null);\n    this.isLoggedIn = false;\n  }\n  signup(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCiAvefFkCgdxZzD1_wJ9AbqBSqkffdXOU', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  login(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCiAvefFkCgdxZzD1_wJ9AbqBSqkffdXOU', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  autoLogin() {\n    const userData = JSON.parse(localStorage.getItem('userData'));\n    if (!userData) {\n      return;\n    }\n    const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n    if (loadedUser.token) {\n      this.user.next(loadedUser);\n      const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n      this.autoLogout(expirationDuration);\n    }\n  }\n  logout() {\n    this.user.next(null);\n    this.router.navigate(['/auth']);\n    localStorage.removeItem('userData');\n    if (this.tokenExpirationTimer) {\n      clearTimeout(this.tokenExpirationTimer);\n    }\n    this.tokenExpirationTimer = null;\n  }\n  autoLogout(expirationDuration) {\n    this.tokenExpirationTimer = setTimeout(() => {\n      this.logout();\n    }, expirationDuration);\n  }\n  handleAuthentication(email, userId, token, expiresIn) {\n    const expiradionDate = new Date(new Date().getTime() + expiresIn * 1000);\n    const user = new User(email, userId, token, expiradionDate);\n    this.user.next(user);\n    this.autoLogout(expiresIn * 1000);\n    localStorage.setItem('userData', JSON.stringify(user));\n    this.isLoggedIn = true;\n  }\n  handleError(errorRes) {\n    let errorMsg = 'An unknown error occured!';\n    if (!errorRes.error || !errorRes.error.error) {\n      return throwError(errorMsg);\n    }\n    switch (errorRes.error.error.message) {\n      case 'EMAIL_EXISTS':\n        errorMsg = 'This email exists already';\n        break;\n      case 'EMAIL_NOT_FOUND':\n        errorMsg = 'This email does not exist.';\n        break;\n      case 'INVALID_PASSWORD':\n        errorMsg = 'This password is not correct.';\n        break;\n    }\n    return throwError(errorMsg);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","tap","throwError","BehaviorSubject","User","AuthService","constructor","http","router","user","isLoggedIn","signup","email","password","post","returnSecureToken","pipe","handleError","resData","handleAuthentication","localId","idToken","expiresIn","login","autoLogin","userData","JSON","parse","localStorage","getItem","loadedUser","id","_token","Date","_tokenExpirationDate","token","next","expirationDuration","getTime","autoLogout","logout","navigate","removeItem","tokenExpirationTimer","clearTimeout","setTimeout","userId","expiradionDate","setItem","stringify","errorRes","errorMsg","error","message","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["/home/oliver/Desktop/recipe-list-angular/src/app/auth/auth.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError, tap } from 'rxjs/operators';\nimport { throwError, BehaviorSubject } from 'rxjs';\n\nimport { User } from './user.model';\nimport { Router } from '@angular/router';\n\nexport interface AuthResposeData {\n  kind: string;\n  idToken: string;\n  email: string;\n  refreshToken: string;\n  expiresIn: string;\n  localId: string;\n  registered?: boolean;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  user = new BehaviorSubject<User>(null);\n  private tokenExpirationTimer: any;\n  isLoggedIn = false;\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  signup(email: string, password: string) {\n    return this.http\n      .post<AuthResposeData>(\n        'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCiAvefFkCgdxZzD1_wJ9AbqBSqkffdXOU',\n        { email: email, password: password, returnSecureToken: true }\n      )\n      .pipe(\n        catchError(this.handleError),\n        tap((resData) => {\n          this.handleAuthentication(\n            resData.email,\n            resData.localId,\n            resData.idToken,\n            +resData.expiresIn\n          );\n        })\n      );\n  }\n\n  login(email: string, password: string) {\n    return this.http\n      .post<AuthResposeData>(\n        'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCiAvefFkCgdxZzD1_wJ9AbqBSqkffdXOU',\n        { email: email, password: password, returnSecureToken: true }\n      )\n      .pipe(\n        catchError(this.handleError),\n        tap((resData) => {\n          this.handleAuthentication(\n            resData.email,\n            resData.localId,\n            resData.idToken,\n            +resData.expiresIn\n          );\n        })\n      );\n  }\n\n  autoLogin() {\n    const userData: {\n      email: string;\n      id: string;\n      _token: string;\n      _tokenExpirationDate: string;\n    } = JSON.parse(localStorage.getItem('userData'));\n    if (!userData) {\n      return;\n    }\n    const loadedUser = new User(\n      userData.email,\n      userData.id,\n      userData._token,\n      new Date(userData._tokenExpirationDate)\n    );\n    if (loadedUser.token) {\n      this.user.next(loadedUser);\n      const expirationDuration =\n        new Date(userData._tokenExpirationDate).getTime() -\n        new Date().getTime();\n      this.autoLogout(expirationDuration);\n    }\n  }\n\n  logout() {\n    this.user.next(null);\n    this.router.navigate(['/auth']);\n    localStorage.removeItem('userData');\n    if (this.tokenExpirationTimer) {\n      clearTimeout(this.tokenExpirationTimer);\n    }\n    this.tokenExpirationTimer = null;\n  }\n\n  autoLogout(expirationDuration: number) {\n    this.tokenExpirationTimer = setTimeout(() => {\n      this.logout();\n    }, expirationDuration);\n  }\n\n  private handleAuthentication(\n    email: string,\n    userId: string,\n    token: string,\n    expiresIn: number\n  ) {\n    const expiradionDate = new Date(new Date().getTime() + expiresIn * 1000);\n    const user = new User(email, userId, token, expiradionDate);\n    this.user.next(user);\n    this.autoLogout(expiresIn * 1000);\n    localStorage.setItem('userData', JSON.stringify(user));\n    this.isLoggedIn = true;\n  }\n\n  private handleError(errorRes: HttpErrorResponse) {\n    let errorMsg = 'An unknown error occured!';\n    if (!errorRes.error || !errorRes.error.error) {\n      return throwError(errorMsg);\n    }\n    switch (errorRes.error.error.message) {\n      case 'EMAIL_EXISTS':\n        errorMsg = 'This email exists already';\n        break;\n      case 'EMAIL_NOT_FOUND':\n        errorMsg = 'This email does not exist.';\n        break;\n      case 'INVALID_PASSWORD':\n        errorMsg = 'This password is not correct.';\n        break;\n    }\n    return throwError(errorMsg);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}